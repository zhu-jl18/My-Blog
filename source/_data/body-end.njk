<script>
(function() {
  const STORAGE_KEY = 'theme';

  function getPreferredTheme() {
    const saved = localStorage.getItem(STORAGE_KEY);
    if (saved === 'light' || saved === 'dark') return saved;
    return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  }

  function applyTheme(theme) {
    if (theme === 'dark') {
      document.documentElement.setAttribute('data-theme', 'dark');
    } else {
      document.documentElement.removeAttribute('data-theme');
    }
  }

  function updateToggleIcon(btn) {
    if (!btn) return;
    const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
    const icon = btn.querySelector('i');
    if (icon) {
      // 检查是否在菜单中（有文字）
      const hasText = btn.textContent && btn.textContent.includes('主题');
      if (hasText) {
        icon.className = isDark ? 'fa fa-sun fa-fw' : 'fa fa-moon fa-fw';
        btn.innerHTML = `<i class="${icon.className}"></i>${isDark ? '浅色' : '深色'}`;
      } else {
        icon.className = isDark ? 'fa fa-sun fa-fw fa-lg' : 'fa fa-moon fa-fw fa-lg';
      }
    }
    btn.setAttribute('aria-label', isDark ? '切换为浅色' : '切换为深色');
    btn.title = isDark ? '切换为浅色' : '切换为深色';
  }


  // 悬浮按钮：位置选项 left-bottom | left-middle | top-left
  const FLOAT_POS = 'left-bottom';
  const POS_KEY = 'theme-toggle-pos-v1';

  function applyStoredPosition(btn) {
    try {
      const raw = localStorage.getItem(POS_KEY);
      if (!raw) return;
      const pos = JSON.parse(raw);
      if (typeof pos.leftPct !== 'number' || typeof pos.topPct !== 'number') return;
      const vw = window.innerWidth;
      const vh = window.innerHeight;
      const left = Math.max(8, Math.min(vw - btn.offsetWidth - 8, pos.leftPct * vw));
      const top = Math.max(8, Math.min(vh - btn.offsetHeight - 8, pos.topPct * vh));
      btn.style.left = left + 'px';
      btn.style.top = top + 'px';
      btn.style.bottom = '';
      btn.classList.remove('pos-left-bottom', 'pos-left-middle', 'pos-top-left');
      console.log('[theme] restored position', pos);
    } catch (e) {
      console.warn('[theme] restore position failed', e);
    }
  }

  function saveStoredPosition(btn) {
    const vw = window.innerWidth;
    const vh = window.innerHeight;
    const rect = btn.getBoundingClientRect();
    const leftPct = rect.left / vw;
    const topPct = rect.top / vh;
    const data = { leftPct: +leftPct.toFixed(4), topPct: +topPct.toFixed(4) };
    localStorage.setItem(POS_KEY, JSON.stringify(data));
    console.log('[theme] saved position', data);
  }

  function enableDrag(btn) {
    const margin = 8;
    const getPoint = (ev) => {
      if (ev.touches && ev.touches[0]) return { x: ev.touches[0].clientX, y: ev.touches[0].clientY };
      return { x: ev.clientX, y: ev.clientY };
    };
    let dragging = false, sx = 0, sy = 0, sl = 0, st = 0;

    const onStart = (e) => {
      const p = getPoint(e);
      dragging = true;
      sx = p.x; sy = p.y;
      const r = btn.getBoundingClientRect();
      sl = r.left; st = r.top;
      btn.style.transition = 'none';
      document.addEventListener('mousemove', onMove);
      document.addEventListener('touchmove', onMove, { passive: false });
      document.addEventListener('mouseup', onEnd);
      document.addEventListener('touchend', onEnd);
      e.preventDefault();
    };

    const onMove = (e) => {
      if (!dragging) return;
      const p = getPoint(e);
      let nl = sl + (p.x - sx);
      let nt = st + (p.y - sy);
      const maxL = window.innerWidth - btn.offsetWidth - margin;
      const maxT = window.innerHeight - btn.offsetHeight - margin;
      nl = Math.max(margin, Math.min(maxL, nl));
      nt = Math.max(margin, Math.min(maxT, nt));
      btn.style.left = nl + 'px';
      btn.style.top = nt + 'px';
      btn.style.bottom = '';
      btn.classList.remove('pos-left-bottom', 'pos-left-middle', 'pos-top-left');
      e.preventDefault();
    };

    const onEnd = () => {
      if (!dragging) return;
      dragging = false;
      btn.style.transition = '';
      saveStoredPosition(btn);
      document.removeEventListener('mousemove', onMove);
      document.removeEventListener('touchmove', onMove);
      document.removeEventListener('mouseup', onEnd);
      document.removeEventListener('touchend', onEnd);
    };

    btn.addEventListener('mousedown', onStart);
    btn.addEventListener('touchstart', onStart, { passive: false });

    // 双击恢复默认位置
    btn.addEventListener('dblclick', (e) => {
      e.preventDefault();
      localStorage.removeItem(POS_KEY);
      btn.classList.add(`pos-${FLOAT_POS}`);
      btn.style.top = '';
      btn.style.left = '18px';
      btn.style.bottom = FLOAT_POS === 'left-bottom' ? '18px' : '';
      console.log('[theme] position reset to default');
    });

    // 窗口缩放保持在视口内
    window.addEventListener('resize', () => applyStoredPosition(btn));
  }

  function ensureFloatingToggle() {
    // 移除旧的
    let floatBtn = document.querySelector('.theme-floating-toggle');
    if (floatBtn) floatBtn.remove();

    // 创建新的
    floatBtn = document.createElement('div');
    floatBtn.className = `theme-floating-toggle pos-${FLOAT_POS}`;
    floatBtn.setAttribute('role', 'button');
    floatBtn.setAttribute('aria-label', '主题切换');
    floatBtn.innerHTML = '<i class="fa fa-moon fa-fw"></i>';

    floatBtn.addEventListener('click', () => {
      const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
      const next = isDark ? 'light' : 'dark';
      localStorage.setItem(STORAGE_KEY, next);
      applyTheme(next);
      updateToggleIcon(floatBtn);
    });

    document.body.appendChild(floatBtn);
    console.log('[theme] floating toggle attached', floatBtn);
    // 若样式尚未编译或被覆盖，确保可见
    floatBtn.style.display = 'inline-flex';
    floatBtn.style.position = 'fixed';
    floatBtn.style.left = '18px';
    floatBtn.style.bottom = FLOAT_POS === 'left-bottom' ? '18px' : '';

    // 应用记忆位置 + 启用拖拽
    applyStoredPosition(floatBtn);
    enableDrag(floatBtn);

    updateToggleIcon(floatBtn);
  }

  // 不再把按钮插入导航；如存在旧按钮则移除
  function cleanupNavToggles() {
    document.querySelectorAll('.site-nav-right .theme-toggle, .main-menu .menu-item-theme-toggle').forEach(el => el.remove());
  }

  // 初始化
  applyTheme(getPreferredTheme());
  cleanupNavToggles();
  ensureFloatingToggle();

  // 跟随系统变化（仅当没有显式选择时）
  const media = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)');
  if (media && media.addEventListener) {
    media.addEventListener('change', () => {
      if (!localStorage.getItem(STORAGE_KEY)) {
        applyTheme(getPreferredTheme());
        updateToggleIcon(document.querySelector('.theme-floating-toggle'));
      }
    });
  }

  // PJAX 页面切换后重新挂载按钮
  document.addEventListener('pjax:success', () => {
    cleanupNavToggles();
    ensureFloatingToggle();
  });
})();
</script>
