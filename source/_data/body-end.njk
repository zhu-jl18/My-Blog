<!-- 简洁音乐播放器 -->
<div id="music-player-widget" class="music-player-widget">
  <!-- 收缩按钮 -->
  <div class="player-toggle" id="player-toggle" title="收起/展开">
    <i class="fa fa-chevron-left"></i>
  </div>
  
  <!-- 音乐播放器主体 -->
  <div class="music-player">
    <div class="player-header">
      <i class="fa fa-music"></i>
      <span>音乐播放器</span>
    </div>
    
    <!-- 歌曲信息 -->
    <div class="song-info">
      <div class="song-title" id="song-title">未选择歌曲</div>
      <div class="song-artist" id="song-artist">-</div>
    </div>
    
    <!-- 播放控制按钮 -->
    <div class="player-controls">
      <button class="control-btn" id="prev-btn" title="上一首">
        <i class="fa fa-step-backward"></i>
      </button>
      <button class="control-btn play-btn" id="play-btn" title="播放/暂停">
        <i class="fa fa-play"></i>
      </button>
      <button class="control-btn" id="next-btn" title="下一首">
        <i class="fa fa-step-forward"></i>
      </button>
      <button class="control-btn" id="shuffle-btn" title="随机播放">
        <i class="fa fa-random"></i>
      </button>
    </div>
    
    <!-- 进度条 -->
    <div class="progress-section">
      <div class="progress-bar" id="progress-bar">
        <div class="progress-fill" id="progress-fill"></div>
        <div class="progress-handle" id="progress-handle"></div>
      </div>
      <div class="time-info">
        <span id="current-time">0:00</span>
        <span id="total-time">0:00</span>
      </div>
    </div>
    
    <!-- 音量控制 -->
    <div class="volume-section">
      <i class="fa fa-volume-up volume-icon"></i>
      <div class="volume-bar" id="volume-bar">
        <div class="volume-fill" id="volume-fill"></div>
        <div class="volume-handle" id="volume-handle"></div>
      </div>
      <span class="volume-text" id="volume-text">30%</span>
    </div>
    
    <!-- 播放列表 -->
    <div class="playlist-section">
      <div class="playlist-header">
        <span>播放列表</span>
        <button class="playlist-toggle" id="playlist-toggle">
          <i class="fa fa-chevron-down"></i>
        </button>
      </div>
      <div class="playlist" id="playlist">
        <div class="playlist-item loading">正在加载歌曲...</div>
      </div>
    </div>
  </div>
  
  <!-- 隐藏的音频元素 -->
  <audio id="audio-player" preload="metadata"></audio>
</div>

<script>
// 音乐播放器配置
const MUSIC_CONFIG = {
  // GitHub CDN 基础路径
  cdnBase: 'https://cdn.jsdelivr.net/gh/zhu-jl18/cdn4blog@main/music/',
  
  // 音乐列表 - 请根据你的实际文件修改
  playlist: [
    {
      title: '示例歌曲1',
      artist: '示例艺术家',
      file: 'song1.mp3'
    },
    {
      title: '示例歌曲2', 
      artist: '示例艺术家',
      file: 'song2.mp3'
    },
    {
      title: '示例歌曲3',
      artist: '示例艺术家', 
      file: 'song3.mp3'
    }
  ]
};

// 音乐播放器类
class MusicPlayer {
  constructor() {
    this.audio = document.getElementById('audio-player');
    this.currentIndex = 0;
    this.isPlaying = false;
    this.isShuffled = false;
    this.volume = 0.3;
    this.isPlaylistVisible = false;
    
    this.initElements();
    this.initEvents();
    this.loadPlaylist();
    this.updateVolumeDisplay();
  }
  
  initElements() {
    // 播放控制元素
    this.playBtn = document.getElementById('play-btn');
    this.prevBtn = document.getElementById('prev-btn');
    this.nextBtn = document.getElementById('next-btn');
    this.shuffleBtn = document.getElementById('shuffle-btn');
    
    // 信息显示元素
    this.songTitle = document.getElementById('song-title');
    this.songArtist = document.getElementById('song-artist');
    this.currentTime = document.getElementById('current-time');
    this.totalTime = document.getElementById('total-time');
    
    // 进度条元素
    this.progressBar = document.getElementById('progress-bar');
    this.progressFill = document.getElementById('progress-fill');
    this.progressHandle = document.getElementById('progress-handle');
    
    // 音量控制元素
    this.volumeBar = document.getElementById('volume-bar');
    this.volumeFill = document.getElementById('volume-fill');
    this.volumeHandle = document.getElementById('volume-handle');
    this.volumeText = document.getElementById('volume-text');
    
    // 播放列表元素
    this.playlist = document.getElementById('playlist');
    this.playlistToggle = document.getElementById('playlist-toggle');
    
    // 收缩控制
    this.playerToggle = document.getElementById('player-toggle');
    this.musicWidget = document.getElementById('music-player-widget');
  }
  
  initEvents() {
    // 播放控制事件
    this.playBtn.addEventListener('click', () => this.togglePlay());
    this.prevBtn.addEventListener('click', () => this.previousSong());
    this.nextBtn.addEventListener('click', () => this.nextSong());
    this.shuffleBtn.addEventListener('click', () => this.toggleShuffle());
    
    // 音频事件
    this.audio.addEventListener('loadedmetadata', () => this.updateDuration());
    this.audio.addEventListener('timeupdate', () => this.updateProgress());
    this.audio.addEventListener('ended', () => this.nextSong());
    this.audio.addEventListener('error', (e) => this.handleError(e));
    
    // 进度条事件
    this.progressBar.addEventListener('click', (e) => this.seekTo(e));
    this.initDragHandler(this.progressHandle, this.progressBar, (progress) => {
      this.audio.currentTime = this.audio.duration * progress;
    });
    
    // 音量控制事件
    this.volumeBar.addEventListener('click', (e) => this.setVolume(e));
    this.initDragHandler(this.volumeHandle, this.volumeBar, (volume) => {
      this.volume = volume;
      this.audio.volume = volume;
      this.updateVolumeDisplay();
    });
    
    // 播放列表事件
    this.playlistToggle.addEventListener('click', () => this.togglePlaylist());
    
    // 收缩事件
    this.playerToggle.addEventListener('click', () => this.toggleWidget());
  }
  
  loadPlaylist() {
    this.playlist.innerHTML = '';
    MUSIC_CONFIG.playlist.forEach((song, index) => {
      const item = document.createElement('div');
      item.className = 'playlist-item';
      item.innerHTML = `
        <span class="song-info">
          <strong>${song.title}</strong>
          <small>${song.artist}</small>
        </span>
      `;
      item.addEventListener('click', () => this.playSong(index));
      this.playlist.appendChild(item);
    });
    
    // 加载第一首歌曲
    if (MUSIC_CONFIG.playlist.length > 0) {
      this.loadSong(0);
    }
  }
  
  loadSong(index) {
    if (index < 0 || index >= MUSIC_CONFIG.playlist.length) return;
    
    this.currentIndex = index;
    const song = MUSIC_CONFIG.playlist[index];
    
    this.songTitle.textContent = song.title;
    this.songArtist.textContent = song.artist;
    this.audio.src = MUSIC_CONFIG.cdnBase + song.file;
    
    // 更新播放列表高亮
    this.updatePlaylistHighlight();
  }
  
  playSong(index) {
    this.loadSong(index);
    this.play();
  }
  
  togglePlay() {
    if (this.isPlaying) {
      this.pause();
    } else {
      this.play();
    }
  }
  
  play() {
    if (this.audio.src) {
      this.audio.play().then(() => {
        this.isPlaying = true;
        this.playBtn.innerHTML = '<i class="fa fa-pause"></i>';
      }).catch(e => this.handleError(e));
    }
  }
  
  pause() {
    this.audio.pause();
    this.isPlaying = false;
    this.playBtn.innerHTML = '<i class="fa fa-play"></i>';
  }
  
  previousSong() {
    let newIndex = this.currentIndex - 1;
    if (newIndex < 0) {
      newIndex = MUSIC_CONFIG.playlist.length - 1;
    }
    this.playSong(newIndex);
  }
  
  nextSong() {
    let newIndex;
    if (this.isShuffled) {
      newIndex = Math.floor(Math.random() * MUSIC_CONFIG.playlist.length);
    } else {
      newIndex = (this.currentIndex + 1) % MUSIC_CONFIG.playlist.length;
    }
    this.playSong(newIndex);
  }
  
  toggleShuffle() {
    this.isShuffled = !this.isShuffled;
    this.shuffleBtn.classList.toggle('active', this.isShuffled);
  }
  
  seekTo(e) {
    const rect = this.progressBar.getBoundingClientRect();
    const progress = (e.clientX - rect.left) / rect.width;
    this.audio.currentTime = this.audio.duration * progress;
  }
  
  setVolume(e) {
    const rect = this.volumeBar.getBoundingClientRect();
    const volume = (e.clientX - rect.left) / rect.width;
    this.volume = Math.max(0, Math.min(1, volume));
    this.audio.volume = this.volume;
    this.updateVolumeDisplay();
  }
  
  updateProgress() {
    if (this.audio.duration) {
      const progress = this.audio.currentTime / this.audio.duration;
      this.progressFill.style.width = `${progress * 100}%`;
      this.progressHandle.style.left = `${progress * 100}%`;
      this.currentTime.textContent = this.formatTime(this.audio.currentTime);
    }
  }
  
  updateDuration() {
    this.totalTime.textContent = this.formatTime(this.audio.duration);
  }
  
  updateVolumeDisplay() {
    this.volumeFill.style.width = `${this.volume * 100}%`;
    this.volumeHandle.style.left = `${this.volume * 100}%`;
    this.volumeText.textContent = `${Math.round(this.volume * 100)}%`;
  }
  
  updatePlaylistHighlight() {
    const items = this.playlist.querySelectorAll('.playlist-item');
    items.forEach((item, index) => {
      item.classList.toggle('active', index === this.currentIndex);
    });
  }
  
  togglePlaylist() {
    this.isPlaylistVisible = !this.isPlaylistVisible;
    this.playlist.style.display = this.isPlaylistVisible ? 'block' : 'none';
    this.playlistToggle.innerHTML = this.isPlaylistVisible 
      ? '<i class="fa fa-chevron-up"></i>' 
      : '<i class="fa fa-chevron-down"></i>';
  }
  
  toggleWidget() {
    this.musicWidget.classList.toggle('collapsed');
    const icon = this.playerToggle.querySelector('i');
    icon.className = this.musicWidget.classList.contains('collapsed') 
      ? 'fa fa-chevron-right' 
      : 'fa fa-chevron-left';
  }
  
  initDragHandler(handle, container, callback) {
    let isDragging = false;
    
    handle.addEventListener('mousedown', (e) => {
      isDragging = true;
      e.preventDefault();
    });
    
    document.addEventListener('mousemove', (e) => {
      if (!isDragging) return;
      
      const rect = container.getBoundingClientRect();
      const progress = Math.max(0, Math.min(1, (e.clientX - rect.left) / rect.width));
      callback(progress);
    });
    
    document.addEventListener('mouseup', () => {
      isDragging = false;
    });
  }
  
  formatTime(seconds) {
    if (isNaN(seconds)) return '0:00';
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  }
  
  handleError(e) {
    console.error('音频播放错误:', e);
    this.songTitle.textContent = '播放出错';
    this.songArtist.textContent = '请检查音频文件';
  }
}

// 延迟初始化音乐播放器
function initMusicPlayer() {
  if (window.musicPlayerLoaded) return;
  window.musicPlayerLoaded = true;
  
  // 等待DOM完全加载后初始化
  setTimeout(() => {
    window.musicPlayer = new MusicPlayer();
  }, 100);
}

// 页面加载完成后延迟加载
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', function() {
    setTimeout(initMusicPlayer, 1000);
  });
} else {
  setTimeout(initMusicPlayer, 1000);
}

// 用户交互后立即加载
document.addEventListener('click', initMusicPlayer, { once: true });
document.addEventListener('scroll', initMusicPlayer, { once: true });
</script>

<!-- 控制台彩蛋 -->
<script>
(function() {
  // 检查是否已经显示过彩蛋
  if (sessionStorage.getItem('consoleEasterEggShown')) return;
  
  // 标记已显示
  sessionStorage.setItem('consoleEasterEggShown', 'true');
  
  // 样式设置
  const styles = {
    title: 'color: #ff6b6b; font-size: 24px; font-weight: bold; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);',
    subtitle: 'color: #4ecdc4; font-size: 16px; font-weight: bold;',
    text: 'color: #45b7d1; font-size: 14px;',
    math: 'color: #96ceb4; font-size: 12px; font-family: monospace;',
    contact: 'color: #ffeaa7; font-size: 13px; font-weight: bold;'
  };
  
  console.log('%c🦕 Dirac Sea - 狄拉克之海', styles.title);
  console.log('%c═══════════════════════════════════════', 'color: #ddd;');
  console.log('%c👋 你好，好奇的开发者！', styles.subtitle);
  console.log('%c欢迎来到我的数学与技术世界', styles.text);
  
  console.log('\n%c📊 博客统计:', styles.subtitle);
  console.log('%c• 主要内容: 数学笔记、技术文章、学习记录', styles.text);
  console.log('%c• 技术栈: Hexo + NexT + GitHub Pages', styles.text);
  console.log('%c• 特色功能: 数学公式渲染、暗黑模式、评论系统', styles.text);
  
  console.log('\n%c🧮 数学公式示例:', styles.subtitle);
  console.log('%c∫_{-∞}^{+∞} e^{-x²} dx = √π', styles.math);
  console.log('%cE = mc²', styles.math);
  console.log('%ce^{iπ} + 1 = 0', styles.math);
  
  console.log('\n%c🔍 隐藏功能:', styles.subtitle);
  console.log('%c• 试试访问不存在的页面，有小恐龙游戏哦！', styles.text);
  console.log('%c• 数学图片支持点击放大查看', styles.text);
  console.log('%c• 全站支持暗黑模式切换', styles.text);
  
  console.log('\n%c💬 联系方式:', styles.contact);
  console.log('%cGitHub: https://github.com/zhu-jl18', styles.contact);
  console.log('%cEmail: [在About页面查看]', styles.contact);
  
  console.log('%c🎯 彩蛋提示:', styles.subtitle);
  console.log('%c输入 blog.stats() 查看博客统计', styles.text);
  console.log('%c输入 blog.math() 显示随机数学公式', styles.text);
  console.log('%c输入 blog.about() 了解更多信息', styles.text);
  console.log('%c输入 blog.show() 重新显示这个欢迎信息', styles.text);
  
  console.log('\n%c🚀 快捷方式:', styles.subtitle);
  console.log('%c双击字母键 E 可以快速重新显示控制台彩蛋', styles.text);
  
  console.log('\n%c═══════════════════════════════════════', 'color: #ddd;');
  console.log('%c感谢你的访问！记得在评论区留言 😊', styles.text);
  
  // 添加交互式功能
  window.blog = {
    stats: function() {
      const posts = document.querySelectorAll('.post-title, .post-meta').length;
      console.log('%c📊 博客统计数据', 'color: #ff6b6b; font-size: 16px; font-weight: bold;');
      console.log(`%c当前页面加载时间: ${performance.now().toFixed(2)}ms`, 'color: #4ecdc4;');
      console.log(`%c页面元素数量: ${document.querySelectorAll('*').length}`, 'color: #4ecdc4;');
      console.log(`%c图片数量: ${document.querySelectorAll('img').length}`, 'color: #4ecdc4;');
      console.log(`%c链接数量: ${document.querySelectorAll('a').length}`, 'color: #4ecdc4;');
    },
    
    math: function() {
      const formulas = [
        '∮ E⃗ · dA⃗ = Q/ε₀  (高斯定律)',
        '∇ × B⃗ = μ₀J⃗ + μ₀ε₀∂E⃗/∂t  (安培定律)',
        'ψ(x,t) = ∑ cₙφₙ(x)e^{-iEₙt/ℏ}  (薛定谔方程解)',
        'S = k ln Ω  (玻尔兹曼熵公式)',
        'ds² = -c²dt² + dx² + dy² + dz²  (闵可夫斯基度规)',
        'Γ(z) = ∫₀^∞ t^{z-1}e^{-t}dt  (伽马函数)',
        '∑_{n=1}^∞ 1/n² = π²/6  (巴塞尔问题)'
      ];
      const formula = formulas[Math.floor(Math.random() * formulas.length)];
      console.log('%c🧮 随机数学公式:', 'color: #ff6b6b; font-size: 16px; font-weight: bold;');
      console.log(`%c${formula}`, 'color: #96ceb4; font-size: 14px; font-family: monospace;');
    },
    
    about: function() {
      console.log('%c🎓 关于博主', 'color: #ff6b6b; font-size: 16px; font-weight: bold;');
      console.log('%c• 数学爱好者，喜欢探索数学的美妙', 'color: #4ecdc4;');
      console.log('%c• 技术学习者，持续关注新技术发展', 'color: #4ecdc4;');
      console.log('%c• 知识分享者，乐于记录学习心得', 'color: #4ecdc4;');
      console.log('%c博客主要分享数学学习笔记和技术实践经验', 'color: #45b7d1;');
    },
    
    show: function() {
      // 重新显示完整的控制台彩蛋
      console.clear();
      console.log('%c🦕 Dirac Sea - 狄拉克之海', 'color: #ff6b6b; font-size: 24px; font-weight: bold; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);');
      console.log('%c═══════════════════════════════════════', 'color: #ddd;');
      console.log('%c👋 你好，好奇的开发者！', 'color: #4ecdc4; font-size: 16px; font-weight: bold;');
      console.log('%c欢迎来到我的数学与技术世界', 'color: #45b7d1; font-size: 14px;');
      
      console.log('\n%c📊 博客统计:', 'color: #4ecdc4; font-size: 16px; font-weight: bold;');
      console.log('%c• 主要内容: 数学笔记、技术文章、学习记录', 'color: #45b7d1; font-size: 14px;');
      console.log('%c• 技术栈: Hexo + NexT + GitHub Pages', 'color: #45b7d1; font-size: 14px;');
      console.log('%c• 特色功能: 数学公式渲染、暗黑模式、评论系统', 'color: #45b7d1; font-size: 14px;');
      
      console.log('\n%c🧮 数学公式示例:', 'color: #4ecdc4; font-size: 16px; font-weight: bold;');
      console.log('%c∫_{-∞}^{+∞} e^{-x²} dx = √π', 'color: #96ceb4; font-size: 12px; font-family: monospace;');
      console.log('%cE = mc²', 'color: #96ceb4; font-size: 12px; font-family: monospace;');
      console.log('%ce^{iπ} + 1 = 0', 'color: #96ceb4; font-size: 12px; font-family: monospace;');
      
      console.log('\n%c🔍 隐藏功能:', 'color: #4ecdc4; font-size: 16px; font-weight: bold;');
      console.log('%c• 试试访问不存在的页面，有小恐龙游戏哦！', 'color: #45b7d1; font-size: 14px;');
      console.log('%c• 数学图片支持点击放大查看', 'color: #45b7d1; font-size: 14px;');
      console.log('%c• 全站支持暗黑模式切换', 'color: #45b7d1; font-size: 14px;');
      
      console.log('\n%c💬 联系方式:', 'color: #ffeaa7; font-size: 13px; font-weight: bold;');
      console.log('%cGitHub: https://github.com/zhu-jl18', 'color: #ffeaa7; font-size: 13px; font-weight: bold;');
      console.log('%cEmail: [在About页面查看]', 'color: #ffeaa7; font-size: 13px; font-weight: bold;');
      
      console.log('\n%c🎯 彩蛋提示:', 'color: #4ecdc4; font-size: 16px; font-weight: bold;');
      console.log('%c输入 blog.stats() 查看博客统计', 'color: #45b7d1; font-size: 14px;');
      console.log('%c输入 blog.math() 显示随机数学公式', 'color: #45b7d1; font-size: 14px;');
      console.log('%c输入 blog.about() 了解更多信息', 'color: #45b7d1; font-size: 14px;');
      console.log('%c输入 blog.show() 重新显示这个欢迎信息', 'color: #45b7d1; font-size: 14px;');
      
      console.log('\n%c🚀 快捷方式:', 'color: #4ecdc4; font-size: 16px; font-weight: bold;');
      console.log('%c双击字母键 E 可以快速重新显示控制台彩蛋', 'color: #45b7d1; font-size: 14px;');
      
      console.log('\n%c═══════════════════════════════════════', 'color: #ddd;');
      console.log('%c感谢你的访问！记得在评论区留言 😊', 'color: #45b7d1; font-size: 14px;');
    }
  };
  
})();
</script>

<!-- 更多趣味彩蛋 -->
<script>
// Konami Code 彩蛋 (上上下下左右左右BA)
(function() {
  const konamiCode = [
    'ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown',
    'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight',
    'KeyB', 'KeyA'
  ];
  let konamiIndex = 0;
  
  document.addEventListener('keydown', function(e) {
    if (e.code === konamiCode[konamiIndex]) {
      konamiIndex++;
      if (konamiIndex === konamiCode.length) {
        // 触发彩蛋效果
        triggerKonamiEasterEgg();
        konamiIndex = 0;
      }
    } else {
      konamiIndex = 0;
    }
  });
  
  function triggerKonamiEasterEgg() {
    // 创建彩虹色文字效果
    const style = document.createElement('style');
    style.textContent = `
      @keyframes rainbow {
        0% { color: #ff0000; }
        16% { color: #ff8000; }
        33% { color: #ffff00; }
        50% { color: #00ff00; }
        66% { color: #0000ff; }
        83% { color: #8000ff; }
        100% { color: #ff0000; }
      }
      .konami-rainbow { animation: rainbow 1s infinite; }
    `;
    document.head.appendChild(style);
    
    // 应用效果到页面标题
    const title = document.querySelector('.site-title, h1');
    if (title) {
      title.classList.add('konami-rainbow');
      setTimeout(() => {
        title.classList.remove('konami-rainbow');
        document.head.removeChild(style);
      }, 5000);
    }
    
    console.log('%c🎉 Konami Code 激活！', 'color: #ff6b6b; font-size: 20px; font-weight: bold;');
    console.log('%c恭喜你发现了隐藏彩蛋！', 'color: #4ecdc4; font-size: 16px;');
    alert('🎉 Konami Code 彩蛋激活！\n你真是个有趣的访客！');
  }
})();

// 鼠标点击数学符号特效
(function() {
  const mathSymbols = ['∫', '∑', '∏', '∞', 'π', 'Ω', 'Δ', '∇', '∂', '∈', '∪', '∩', '⊆', '⊇', '≈', '≡', '±', '√'];
  
  document.addEventListener('click', function(e) {
    // 随机决定是否显示特效 (20% 概率)
    if (Math.random() > 0.8) {
      createMathSymbolEffect(e.clientX, e.clientY);
    }
  });
  
  function createMathSymbolEffect(x, y) {
    const symbol = mathSymbols[Math.floor(Math.random() * mathSymbols.length)];
    const element = document.createElement('div');
    
    element.textContent = symbol;
    element.style.cssText = `
      position: fixed;
      left: ${x}px;
      top: ${y}px;
      font-size: 20px;
      color: #4ecdc4;
      font-weight: bold;
      pointer-events: none;
      z-index: 9999;
      animation: float-up 2s ease-out forwards;
    `;
    
    // 添加动画
    const style = document.createElement('style');
    style.textContent = `
      @keyframes float-up {
        0% { opacity: 1; transform: translateY(0) scale(1); }
        100% { opacity: 0; transform: translateY(-50px) scale(1.5); }
      }
    `;
    if (!document.querySelector('#math-symbol-animation')) {
      style.id = 'math-symbol-animation';
      document.head.appendChild(style);
    }
    
    document.body.appendChild(element);
    
    // 2秒后移除元素
    setTimeout(() => {
      if (element.parentNode) {
        element.parentNode.removeChild(element);
      }
    }, 2000);
  }
})();

// 双击E键快捷方式 - 快速显示控制台彩蛋
(function() {
  let lastEKeyTime = 0;
  const doubleClickThreshold = 300; // 300ms内为双击
  
  document.addEventListener('keydown', function(e) {
    // 只在没有聚焦到输入框且没有修饰键的情况下触发
    if (e.code === 'KeyE' && 
        !e.ctrlKey && !e.altKey && !e.shiftKey && !e.metaKey && 
        !document.activeElement.matches('input, textarea, [contenteditable]') &&
        !document.querySelector('.local-search-pop-overlay')) {
      
      const currentTime = Date.now();
      
      // 检查是否为双击
      if (currentTime - lastEKeyTime < doubleClickThreshold) {
        // 双击E键触发，不阻止默认行为
        if (window.blog && window.blog.show) {
          window.blog.show();
        }
        lastEKeyTime = 0; // 重置，防止连续触发
      } else {
        lastEKeyTime = currentTime;
      }
    }
  });
})();
</script>


